package utils

import D "github.com/fbaube/dsmnd"

// TableDetails is key to the entire data repository scheme:
// it contains all metadata required to manage tables & fields.
// It describes an application's database schema requirements
// at both the table level and field-by-field. A primary key
// is assumed for every table, and foreign keys are allowed.
//
// NOTE: The case of multiple foreign indices 
// into the same table is semi-resolved. 
//
// All text fields should be in lower-case.
// Enforcement of this will inevitably be patchy.
//
// Notes on particular fields:
//   - The field [ColumnSpecs] is a slice of [dsmnd.ColumnSpec],
//     which has four text fields:
//     [BasicDatatype], StorNam, DispName, Description.
//   - If there are no foreign keys, the field [ForenKeys] may be
//     either nil or length [0].
//   - TODO: (Maybe): the field [ColumnSpecs] could be nil or len 0.
//     If so then it should "probably" be autogenerated (partially
//     only) by reflection from the contents of a same-named table
//     currently existing in the DB.
//
// Notes on date-time fields:
//   - These are not an issue for SQLite, since either a string or an
//     int can be used. However, date-time fields referenced using THIS
//     system (i.e. [utils.TableDetails] and [dsmnd.DbColumnSpec]) use 
//     strings (SQLite DDL "TEXT"), which are expected to be ISO-8601 
//     / RFC 3339 (and probly UTC). It is the first option listed in
//     https://www.sqlite.org/datatype3.html#date_and_time_datatype:
//   - TEXT: "YYYY-MM-DD HH:MM:SS.SSS"
//   - REAL as Julian day numbers: the day count since 24 November 4714 BC
//   - INTEGER as Unix time: the seconds count since 1970-01-01 00:00:00 UTC
//   - NOTE: For TEXT "YYYY-MM-DD HH:MM:SS.SSS", this might often end up
//     in ISO format, which has a "T" instead of the blank " " . So for
//     better readability, and to avoid line breaks, we have a utility
//     that replaces either a blank (" ") or an ISO "T" with a "_".
//
// .
type TableDetails struct {
        // TableSummary is a [Datum] and
	// has four fields, used thusly:
	//  - BasicDatatype: [D.SCT_TABLE] 
	//  - StorName: the name of the table in the DB, 
	//    e.g. inbatch, contentity, topicref (was: Name) 
	//  - DispName: a short version for use in the names of
	//    other variables, e.g. inb, cnt, trf (was: ShortName) 
	//  - Description: TBS
     	D.TableSummary 
	// IDName is the (auto-generatable!) name of the index 
	// field, which (for now) we use in the same format 
	// BOTH for a primary key AND as a foreign key.
	IDName string
	// ColumnNamesCSV is all column names (except primary key), 
	// in a specific order, comma-separated, for use in SQL 
	// statements. We omit the primary key so that we can 
	// use this for SQL INSERT staements too.
	ColumnNamesCSV string
	// We used to have ForenKeys defined by name only, but this is
	// insufficient information, because we need the field name AND
	// the table name. In principle we could derive one from the
	// other using our other DB-related data structures, and maybe
	// we used to, but it adds significant complexity.
	// ForenKeys   []string
	ColumnSpecs []D.ColumnSpec
	// PtrFields(*RowType) returns slice of ptrs to 
	// every fields in rowmodel struct, used for Scan(..)
	// // ColumnPtrsFunc func (any) []any
}

/*
func (p *TableDescriptor) NameOfKey() string {
	return IDName
}
*/
